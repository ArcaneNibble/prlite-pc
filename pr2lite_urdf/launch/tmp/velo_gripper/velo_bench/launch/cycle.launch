<launch>

  <arg name="interface" default="eth1" /> <!-- use ecat0 on a PR2-->

  <node name="controller_manager" launch-prefix="pr2-grant" 
        pkg="pr2_etherCAT" type="pr2_etherCAT"
        args="-i $(arg interface) -x $(find velo_bench)/urdf/cycle.xml"
        output="screen"/>

  <rosparam command="load"
			file="$(find velo_bench)/config/cycle_controllers.yaml" />

  <!-- NOTE: Cycle controller uses simple, standard PR2 transmissions and controllers.
             Thus, this program can be used to exercise (burn-in) the actuator in 
             a gripper-agnostic way.  We do not need to get a gripper transmission
             working in order to use this cycle controller. -->

  <node name="calibration_controller"
        pkg="pr2_controller_manager" type="spawner"
        args="calibration_controller"
        respawn="false" output="screen" />

  <node name="glueEmpty2Bool"
        pkg="velo_bench" type="glueEmpty2Bool.py" args="-i calibration_controller/calibrated"
        respawn="false" output="screen" />

  <node name="cycle_controller"
        pkg="pr2_controller_manager" type="spawner"
        args="--wait=glueEmpty2Bool/calibratedBool  cycle_controller"
        respawn="false" output="screen" />

  <!-- Plot info from the transmission -->
  <node name="plot_ballscrew"
        pkg="rxtools" type="rxplot"
        args="-t BALLSCREW -b 100 -p 30 joint_states/position[0] joint_states/effort[0]"
        respawn="false" output="screen" />

</launch>

