<launch>
    <!-- Start tilting the laser up and down -->
    <!-- from ua_controllers/smart_arm_controller/config/smart_arm.yaml
      laser_tilt_controller:
	    controller:
		package: ax12_controller_core
		module: joint_position_controller
		type: JointPositionControllerAX12
	    joint_name: laser_spin_joint
	    joint_speed: 1.17
	    motor:
		id: 12
		init: 817
        min: 817
        max: 663
    -->
    <!--node name="laser_tilting_action" pkg="prlite_hokuyo" type="hokuyo_laser_action.py" output="screen" -->
    <node name="laser_tilting_action" pkg="wubble_actions" type="hokuyo_laser_action.py" output="screen" >
        <!-- remap from="/neck_tilt_controller/state" to="/neck_tilt_controller/state_pr2_msgs" -->
        <!-- param name="controller" value="neck_tilt_controller" -->
	<!-- remap from="/laser_spin_joint/state" to="/neck_tilt_controller/state_pr2_msgs"-->
	<remap from="/laser_spin_joint/state" to="dynamixel_msgs/JointState"/>
	<param name="controller" value="laser_tilt_controller" /> 
	<!-- param name="controller" value="laser_spin_joint" -->
    </node>
    <node name="tilt_neck_laser" pkg="prlite_hokuyo" type="tilt_neck_laser.py" output="screen" />

    <!-- Start the hokuyo laser at the neck -->
    <node name="neck_laser" pkg="hokuyo_node" type="hokuyo_node" respawn="false" output="screen">
        <remap from="scan" to="neck_scan/scan"/>
        <param name="port" value="/dev/hokuyo_usb"/>
        <param name="min_ang" value="-2.08"/>
        <param name="max_ang" value="2.08"/>
        <param name="frame_id" value="neck_scan_link"/>
    </node>

    <!-- Laser Filters -->
    <!-- 
    <node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" name="neck_shadow_filter">
        <remap from="scan" to="neck_scan/scan" />
        <remap from="cloud_filtered" to="neck_scan/shadow_filtered" />
        <param name="target_frame" value="base_footprint" />
        <param name="high_fidelity" value="false" />
        <rosparam command="load" file="$(find wubble_description)/params/shadow_filter.yaml" />
    </node>
    -->

    <!--
    <node pkg="robot_self_filter" type="self_filter" name="laser_self_filter" respawn="true" output="screen">
        <remap from="cloud_in" to="neck_scan/shadow_filtered" />
        <remap from="cloud_out" to="neck_scan/self_filtered" />
        <param name="sensor_frame" value="neck_scan_link" />
        <rosparam file="$(find wubble_description)/params/w2_self_filter.yaml" command="load" />
    </node>
   -->
    <include file="$(find prlite_hokuyo)/launch/tilting_laser_ground_filter.launch" />

    <!-- assemble pointcloud into a full world view -->
    <node pkg="laser_assembler" type="point_cloud_assembler" output="screen"  name="point_cloud_assembler">
        <remap from="cloud" to="neck_scan/self_filtered"/>
        <param name="tf_cache_time_secs" type="double" value="15.0" />
        <param name="tf_tolerance_secs" type="double" value="0.0" />
        <param name="max_clouds" type="int" value="400" />
        <param name="ignore_laser_skew" type="bool" value="false" />
        <param name="fixed_frame" type="string" value="base_link" />
    </node>

    <!-- 
    <node pkg="pr2_arm_navigation_perception" type="pr2_laser_snapshotter" output="screen" name="snapshotter">
        <remap from="laser_scanner_signal" to="laser_scanner_signal"/>
        <remap from="build_cloud" to="point_cloud_assembler/build_cloud" />
        <remap from="full_cloud" to="full_cloud_filtered" />
    </node>
    -->

    <!-- need to clear known objects from scans -->
    <!-- 
    <node pkg="planning_environment" type="clear_known_objects" name="laser_clear_objects" output="screen">
        <remap from="cloud_in" to="neck_scan/self_filtered" />
        <remap from="cloud_out" to="neck_scan/cloud_known" />
        <param name="sensor_frame" type="string" value="neck_scan_link" />
        <param name="fixed_frame" type="string" value="base_link" />
        <param name="object_padd" type="double" value="0.04" />
        <param name="object_scale" type="double" value="1.0" />
    </node>
    -->
</launch>
