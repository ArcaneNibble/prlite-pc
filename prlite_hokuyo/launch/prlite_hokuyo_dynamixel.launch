<launch>
    <arg name="dynamixel_namespace" value="dynamixel_controller" />
    
    <!-- Load the URDF/Xacro model of our robot -->
    <!-- param name="robot_description" command="$(find xacro)/xacro.py '$(find pi_head_tracking_3d_part1)/urdf/kinectbot.urdf.xacro'" -->

    <!-- Publish the robot state -->
    <!-- node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" -->
        <!-- param name="publish_frequency" value="20.0"-->
    <!-- node -->

   <!-- Start the Dynamixel low-level driver manager with parameters -->
   <node ns="$(arg dynamixel_namespace)" name="dynamixel_manager" pkg="dynamixel_controllers"
      type="controller_manager.py" required="true" output="screen">
      <rosparam>
         namespace: prlite_dynamixel_manager
         serial_ports:
            dynamixel_ax12:
               port_name: "/dev/ttyUSB0"
               baud_rate: 1000000
               min_motor_id: 1
               max_motor_id: 30
               update_rate: 20
      </rosparam>
   </node>
   
    <!-- Load joint controller configuration from YAML file to parameter server -->
    <rosparam ns="$(arg dynamixel_namespace)" file="$(find prlite_hokuyo)/launch/prlite_dynamixel.yaml" command="load" />

   <!-- Start the head pan and tilt controllers -->
   <node ns="$(arg dynamixel_namespace)" name="dynamixel_controller_spawner_ax12" pkg="dynamixel_controllers"
   type="controller_spawner.py"
        args="--manager=prlite_dynamixel_manager
              --port=dynamixel_ax12
              --type=simple
        laser_tilt_controller"
        output="screen" />

   <!-- Start the Dynamixel Joint States Publisher -->
   <!-- node ns="$(arg dynamixel_namespace)" name="dynamixel_joint_states_publisher" pkg="prlite_hokuyo" type="dynamixel_joint_state_publisher.py" output="screen" -->

   <!-- Start all Dynamixels in the relaxed state -->
   <!-- node pkg="pi_head_tracking_3d_part1" type="relax_all_servos.py" name="relax_all_servos" -->
 
   <!-- Publish a static transform between the robot base and the world frame -->
   <!-- node pkg="tf" type="static_transform_publisher" name="world_base_broadcaster" args="0 0 0.0325 0 0 0 /world /base_link 100" -->

    <node name="hokuyo_laser_tilt_action" pkg="wubble_actions" type="hokuyo_laser_action.py" output="screen" >
        <param name="controller" value="/dynamixel_controller/laser_tilt_controller" />
    </node>

    <!-- Start the hokuyo laser at the neck -->
    <node name="neck_laser" pkg="hokuyo_node" type="hokuyo_node" respawn="false" output="screen">
        <remap from="scan" to="neck_scan/scan"/>
        <param name="port" value="/dev/hokuyo_usb"/>
        <param name="min_ang" value="-2.08"/>
        <param name="max_ang" value="2.08"/>
        <param name="frame_id" value="neck_scan_link"/>
    </node>

    <!-- Laser Filters -->
    <node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" name="neck_shadow_filter">
        <remap from="scan" to="neck_scan/scan" />
        <remap from="cloud_filtered" to="neck_scan/shadow_filtered" />
        <param name="target_frame" value="base_footprint" />
        <param name="high_fidelity" value="false" />
        <rosparam command="load" file="$(find wubble_description)/params/shadow_filter.yaml" />
    </node>

<!--
    <node pkg="robot_self_filter" type="self_filter" name="laser_self_filter" respawn="true" output="screen">
        <remap from="cloud_in" to="neck_scan/shadow_filtered" />
        <remap from="cloud_out" to="neck_scan/self_filtered" />
        <param name="sensor_frame" value="neck_scan_link" />
        <rosparam file="$(find wubble_description)/params/w2_self_filter.yaml" command="load" />
    </node>
-->

    <node pkg="semantic_point_annotator" type="sac_inc_ground_removal_node" name="sac_ground_removal" output="screen" >
<!--
        <remap from="tilt_laser_cloud_filtered" to="neck_scan/self_filtered2" />
-->
        <remap from="tilt_laser_cloud_filtered" to="neck_scan/shadow_filtered" />
        <remap from="cloud_ground_filtered" to="neck_scan/ground_object_cloud" />
        <param name="z_threshold" value="0.015" />
        <param name="sac_min_points_per_model" value="40" />
        <param name="sac_distance_threshold" value="0.05" />
        <param name="planar_refine" value="1" />
        <param name="laser_tilt_mount_frame" value="neck_scan_mount_link" />
    </node>

    <!-- assemble pointcloud into a full world view -->
    <node pkg="laser_assembler" type="point_cloud_assembler" output="screen"  name="point_cloud_assembler">
<!--
        <remap from="cloud" to="neck_scan/self_filtered"/>
-->
        <remap from="cloud" to="neck_scan/ground_object_cloud"/>
        <param name="tf_cache_time_secs" type="double" value="15.0" />
        <param name="tf_tolerance_secs" type="double" value="0.0" />
        <param name="max_clouds" type="int" value="400" />
        <param name="ignore_laser_skew" type="bool" value="false" />
        <param name="fixed_frame" type="string" value="base_link" />
    </node>
</launch>
