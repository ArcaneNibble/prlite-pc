<launch>
  <node name="mongo" type="wrapper.py" pkg="mongodb">
    <param name="overwrite" value="false"/>
    <param name="database_path" value="arm_navigation_dbs/pr2lite_real"/>
    <!-- param name="database_path" value="arm_navigation_dbs/pr2lite" -->
    <!-- param name="database_path" value="arm_navigation_dbs/pr2lite_real" -->
  </node>

  <include file="$(find planning_environment)/launch/environment_server.launch">
    <arg name="use_monitor" value="true" />
    <arg name="use_collision_map" value="false" />
    <!-- Called to send the planning scene to the environment server -->
    <param name="set_planning_scene_diff_name" value="environment_server/set_planning_scene_diff"/>
  </include>
  <include file="$(find pr2lite_arm_navigation)/launch/constraint_aware_kinematics.launch" />
  <include file="$(find pr2lite_arm_navigation)/launch/ompl_planning.launch" />
  <include file="$(find pr2lite_arm_navigation)/launch/trajectory_filter_server.launch" />
  <node name="interpolated_ik_node_right" pkg="interpolated_ik_motion_planner" 
	type="interpolated_ik_motion_planner.py" args="r" respawn="false" output ="screen">
    <param name="robot_prefix" type="string" value="pr2lite"/>
    <param name="consistent_angle" type="double" value="1.05"/>
  </node>
 <!-- Called when left arm executes trajectory using controllers -->
  <param name="execute_left_trajectory" value="/arm_controller/follow_joint_trajectory" />
<!--
  <param name="execute_left_trajectory" value="left_arm_controller" />
-->
  <param name="use_robot_data" value="true"/>

  <!-- Called when right arm executes trajectory using controllers -->
  <param name="execute_right_trajectory" value="/arm_controllerR/follow_joint_trajectory" />
  <!-- Called to get left arm inverse kinematics with collision checking -->
  <param name="left_ik_name" value="/pr2lite_left_arm_kinematics/get_constraint_aware_ik" />
  <!-- Called to get right arm inverse kinematics with collision checking -->
  <param name="right_ik_name" value="/pr2lite_right_arm_kinematics/get_constraint_aware_ik" />
  <!-- Called to get left arm inverse kinematics without collision checking -->
  <param name="non_coll_left_ik_name" value="/pr2lite_left_arm_kinematics/get_ik" />
  <!-- Called to get right arm inverse kinematics without collision checking -->
  <param name="non_coll_right_ik_name" value="/pr2lite_right_arm_kinematics/get_ik" />
  <!-- Kinematic chain group name representing the left arm -->
  <param name="left_arm_group" value="left_arm" />
  <!-- Kinematic chain group name representing the right arm -->
  <param name="right_arm_group" value="right_arm" />
  <!-- Degree of freedom representing inverse kinematics redundancy on the left arm -->
  <param name="left_redundancy" value="none" />
  <!-- Degree of freedom representing inverse kinematics redundancy on the right arm -->
  <param name="right_redundancy" value="none" />
  <!-- Link on the left arm to perform inverse kinematics for -->
  <param name="left_ik_link" value="left_wrist_roll_link" />
  <!-- Link on the right arm to perform inverse kinematics for -->
  <param name="right_ik_link" value="right_wrist_roll_link" />
  <!-- Called to plan trajectories given motion plan requests -->
  <param name="planner_service_name" value="/ompl_planning/plan_kinematic_path" />
  <!-- Interpolates between end effector positions for the left arm -->
  <param name="left_interpolate_service_name" value="/l_interpolated_ik_motion_plan" />
  <!-- Interpolates between end effector positions for the right arm -->
  <param name="right_interpolate_service_name" value="/r_interpolated_ik_motion_plan" />
  <!-- Called to smooth and optimize a planner trajectory -->
  <param name="trajectory_filter_service_name" value="/trajectory_filter_server/filter_trajectory_with_constraints" />
  <!-- Called to get the proximity space -->
  <param name="proximity_space_service_name" value="none" />
  <!-- Called to get collision validity of robot state -->
  <param name="proximity_space_validity_name" value="none"/>
  <!-- Called to produce a plan that pulls trajectories out of collision -->
  <param name="proximity_space_planner_name" value="none"/>

    <include file="$(find pr2lite_arm_navigation)/launch/move_groups.launch" />
    <include file="$(find pr2lite_arm_navigation)/launch/pr2lite_gripper.launch" />
    <include file="$(find pr2lite_arm_navigation)/launch/point_head.launch" />
    <include file="$(find pr2lite_arm_navigation)/launch/torso_follow_controller.launch" />
    <include file="$(find pr2lite_arm_navigation)/launch/pr2lite_vision.launch" />
</launch>
