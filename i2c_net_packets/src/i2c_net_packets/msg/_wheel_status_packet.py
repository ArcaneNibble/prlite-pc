"""autogenerated by genmsg_py from wheel_status_packet.msg. Do not edit."""
import roslib.message
import struct


class wheel_status_packet(roslib.message.Message):
  _md5sum = "553dfc1d5fdf704b7c0c2ce73a7442b4"
  _type = "i2c_net_packets/wheel_status_packet"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 srcaddr

# each interval is 0.1 sec
uint32 interval_count
# ticks0_interval and ticks1_interval are speeds, not cumulative counts
int16 ticks0_interval
int16 ticks1_interval

float32 debug_p
float32 debug_i
float32 debug_d
uint16 out
uint16 time

"""
  __slots__ = ['srcaddr','interval_count','ticks0_interval','ticks1_interval','debug_p','debug_i','debug_d','out','time']
  _slot_types = ['uint8','uint32','int16','int16','float32','float32','float32','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       srcaddr,interval_count,ticks0_interval,ticks1_interval,debug_p,debug_i,debug_d,out,time
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(wheel_status_packet, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.srcaddr is None:
        self.srcaddr = 0
      if self.interval_count is None:
        self.interval_count = 0
      if self.ticks0_interval is None:
        self.ticks0_interval = 0
      if self.ticks1_interval is None:
        self.ticks1_interval = 0
      if self.debug_p is None:
        self.debug_p = 0.
      if self.debug_i is None:
        self.debug_i = 0.
      if self.debug_d is None:
        self.debug_d = 0.
      if self.out is None:
        self.out = 0
      if self.time is None:
        self.time = 0
    else:
      self.srcaddr = 0
      self.interval_count = 0
      self.ticks0_interval = 0
      self.ticks1_interval = 0
      self.debug_p = 0.
      self.debug_i = 0.
      self.debug_d = 0.
      self.out = 0
      self.time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_BI2h3f2H.pack(_x.srcaddr, _x.interval_count, _x.ticks0_interval, _x.ticks1_interval, _x.debug_p, _x.debug_i, _x.debug_d, _x.out, _x.time))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.srcaddr, _x.interval_count, _x.ticks0_interval, _x.ticks1_interval, _x.debug_p, _x.debug_i, _x.debug_d, _x.out, _x.time,) = _struct_BI2h3f2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_BI2h3f2H.pack(_x.srcaddr, _x.interval_count, _x.ticks0_interval, _x.ticks1_interval, _x.debug_p, _x.debug_i, _x.debug_d, _x.out, _x.time))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.srcaddr, _x.interval_count, _x.ticks0_interval, _x.ticks1_interval, _x.debug_p, _x.debug_i, _x.debug_d, _x.out, _x.time,) = _struct_BI2h3f2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_BI2h3f2H = struct.Struct("<BI2h3f2H")
