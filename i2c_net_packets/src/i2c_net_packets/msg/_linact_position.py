"""autogenerated by genmsg_py from linact_position.msg. Do not edit."""
import roslib.message
import struct


class linact_position(roslib.message.Message):
  _md5sum = "d4f0a79e30c77b839c7d2bb0b5350e84"
  _type = "i2c_net_packets/linact_position"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 srcaddr

uint32 interval_count
uint16 pos0
uint16 pos1
bool arr0
bool arr1

"""
  __slots__ = ['srcaddr','interval_count','pos0','pos1','arr0','arr1']
  _slot_types = ['uint8','uint32','uint16','uint16','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       srcaddr,interval_count,pos0,pos1,arr0,arr1
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(linact_position, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.srcaddr is None:
        self.srcaddr = 0
      if self.interval_count is None:
        self.interval_count = 0
      if self.pos0 is None:
        self.pos0 = 0
      if self.pos1 is None:
        self.pos1 = 0
      if self.arr0 is None:
        self.arr0 = False
      if self.arr1 is None:
        self.arr1 = False
    else:
      self.srcaddr = 0
      self.interval_count = 0
      self.pos0 = 0
      self.pos1 = 0
      self.arr0 = False
      self.arr1 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_BI2H2B.pack(_x.srcaddr, _x.interval_count, _x.pos0, _x.pos1, _x.arr0, _x.arr1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.srcaddr, _x.interval_count, _x.pos0, _x.pos1, _x.arr0, _x.arr1,) = _struct_BI2H2B.unpack(str[start:end])
      self.arr0 = bool(self.arr0)
      self.arr1 = bool(self.arr1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_BI2H2B.pack(_x.srcaddr, _x.interval_count, _x.pos0, _x.pos1, _x.arr0, _x.arr1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.srcaddr, _x.interval_count, _x.pos0, _x.pos1, _x.arr0, _x.arr1,) = _struct_BI2H2B.unpack(str[start:end])
      self.arr0 = bool(self.arr0)
      self.arr1 = bool(self.arr1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_BI2H2B = struct.Struct("<BI2H2B")
