"""autogenerated by genmsg_py from i2c_pingRequest.msg. Do not edit."""
import roslib.message
import struct


class i2c_pingRequest(roslib.message.Message):
  _md5sum = "c1b0dd20ea2b45257f1cc471e7bb6deb"
  _type = "i2c_net_packets/i2c_pingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 addr

"""
  __slots__ = ['addr']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       addr
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(i2c_pingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.addr is None:
        self.addr = 0
    else:
      self.addr = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.addr))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.addr,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.addr))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.addr,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
"""autogenerated by genmsg_py from i2c_pingResponse.msg. Do not edit."""
import roslib.message
import struct


class i2c_pingResponse(roslib.message.Message):
  _md5sum = "88c66f7cbec80e88a3ca587043d706e4"
  _type = "i2c_net_packets/i2c_pingResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool present
bool responding
uint8 reply



"""
  __slots__ = ['present','responding','reply']
  _slot_types = ['bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       present,responding,reply
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(i2c_pingResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.present is None:
        self.present = False
      if self.responding is None:
        self.responding = False
      if self.reply is None:
        self.reply = 0
    else:
      self.present = False
      self.responding = False
      self.reply = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.present, _x.responding, _x.reply))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.present, _x.responding, _x.reply,) = _struct_3B.unpack(str[start:end])
      self.present = bool(self.present)
      self.responding = bool(self.responding)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.present, _x.responding, _x.reply))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.present, _x.responding, _x.reply,) = _struct_3B.unpack(str[start:end])
      self.present = bool(self.present)
      self.responding = bool(self.responding)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3B = struct.Struct("<3B")
class i2c_ping(roslib.message.ServiceDefinition):
  _type          = 'i2c_net_packets/i2c_ping'
  _md5sum = '835c03cc4724476276610198e140bd9e'
  _request_class  = i2c_pingRequest
  _response_class = i2c_pingResponse
