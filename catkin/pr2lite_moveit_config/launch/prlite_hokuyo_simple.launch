<launch>
    <arg name="dynamixel_namespace" value="dynamixel_controller" />
    
   <!-- Start the Dynamixel low-level driver manager with parameters -->
   <node ns="$(arg dynamixel_namespace)" name="dynamixel_manager" pkg="dynamixel_controllers"
      type="controller_manager.py" required="true" output="screen">
      <rosparam>
         namespace: prlite_dynamixel_manager
         serial_ports:
            dynamixel_ax12:
               port_name: "/dev/ttyUSB0"
               baud_rate: 1000000
               min_motor_id: 1
               max_motor_id: 30
               update_rate: 20
      </rosparam>
   </node>
   
    <!-- Load joint controller configuration from YAML file to parameter server -->
    <rosparam ns="$(arg dynamixel_namespace)" file="$(find prlite_hokuyo)/launch/prlite_dynamixel.yaml" command="load" />

   <!-- Start the head pan and tilt controllers -->
   <node ns="$(arg dynamixel_namespace)" name="dynamixel_controller_spawner_ax12" pkg="dynamixel_controllers"
   type="controller_spawner.py"
        args="--manager=prlite_dynamixel_manager
              --port=dynamixel_ax12
              --type=simple
        laser_tilt_controller"
        output="screen" />

    <node name="hokuyo_laser_action" pkg="wubble_actions" type="hokuyo_laser_action.py" output="screen" >
        <param name="controller" value="/dynamixel_controller/laser_tilt_controller" />
    </node>

    <!-- Start the hokuyo laser at the neck -->
    <node name="neck_laser" pkg="hokuyo_node" type="hokuyo_node" respawn="false" output="screen">
        <remap from="scan" to="neck_scan/scan"/>
        <param name="port" value="/dev/hokuyo_usb"/>
        <!-- param name="intensity" value="true" -->
        <param name="min_ang" value="-2.08"/>
        <param name="max_ang" value="2.08"/>
        <!-- param name="frame_id" value="neck_scan_link" -->
        <!-- param name="frame_id" value="/laser_link" -->
        <param name="frame_id" value="/laser"/>
    </node>

    <!-- fake odometry info (see ua_apps/wubble_robot/launch -->
    <!-- node name="odom_to_footprint" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 odom base_footprint 100"s -->

    <node type="laser_scan_assembler" pkg="laser_assembler" name="prlite_assembler">
      <remap from="scan" to="neck_scan/scan"/>
      <!-- remap from="cloud" to="neck_scan/cloud" -->
      <param name="max_scans" type="int" value="400" />
      <param name="ignore_laser_skew" type="bool" value="false" />
      <!-- param name="fixed_frame" type="string" value="base_link" -->  
      <param name="fixed_frame" type="string" value="/map" />
    </node>

    <!-- assemble pointcloud into a full world view -->
<!--
    <node pkg="laser_assembler" type="point_cloud_assembler" output="screen"  name="point_cloud_assembler">
        <remap from="cloud" to="neck_scan/cloud"/>
        <remap from="scan" to="neck_scan/scan"/>
        <param name="tf_cache_time_secs" type="double" value="15.0" />
        <param name="tf_tolerance_secs" type="double" value="0.0" />
        <param name="max_clouds" type="int" value="400" />
        <param name="ignore_laser_skew" type="bool" value="false" />
        <param name="fixed_frame" type="string" value="base_link" />
    </node>
-->


</launch>
