/* Auto-generated by genmsg_cpp for file /home/ros/rosbuild_ws/prlite-pc/packets_485net/msg/packet_485net_stream.msg */
#ifndef PACKETS_485NET_MESSAGE_PACKET_485NET_STREAM_H
#define PACKETS_485NET_MESSAGE_PACKET_485NET_STREAM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace packets_485net
{
template <class ContainerAllocator>
struct packet_485net_stream_ {
  typedef packet_485net_stream_<ContainerAllocator> Type;

  packet_485net_stream_()
  : header()
  , source(0)
  , destination(0)
  , sport(0)
  , dport(0)
  , type(0)
  , seq(0)
  , data()
  , checksum(0)
  {
  }

  packet_485net_stream_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , source(0)
  , destination(0)
  , sport(0)
  , dport(0)
  , type(0)
  , seq(0)
  , data(_alloc)
  , checksum(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _source_type;
  uint8_t source;

  typedef uint8_t _destination_type;
  uint8_t destination;

  typedef uint8_t _sport_type;
  uint8_t sport;

  typedef uint8_t _dport_type;
  uint8_t dport;

  typedef uint8_t _type_type;
  uint8_t type;

  typedef uint16_t _seq_type;
  uint16_t seq;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  data;

  typedef uint8_t _checksum_type;
  uint8_t checksum;


  typedef boost::shared_ptr< ::packets_485net::packet_485net_stream_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::packets_485net::packet_485net_stream_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct packet_485net_stream
typedef  ::packets_485net::packet_485net_stream_<std::allocator<void> > packet_485net_stream;

typedef boost::shared_ptr< ::packets_485net::packet_485net_stream> packet_485net_streamPtr;
typedef boost::shared_ptr< ::packets_485net::packet_485net_stream const> packet_485net_streamConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::packets_485net::packet_485net_stream_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::packets_485net::packet_485net_stream_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace packets_485net

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::packets_485net::packet_485net_stream_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::packets_485net::packet_485net_stream_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::packets_485net::packet_485net_stream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "97d5160f483bc9f76a962857c9b41caf";
  }

  static const char* value(const  ::packets_485net::packet_485net_stream_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x97d5160f483bc9f7ULL;
  static const uint64_t static_value2 = 0x6a962857c9b41cafULL;
};

template<class ContainerAllocator>
struct DataType< ::packets_485net::packet_485net_stream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "packets_485net/packet_485net_stream";
  }

  static const char* value(const  ::packets_485net::packet_485net_stream_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::packets_485net::packet_485net_stream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint8 source\n\
uint8 destination\n\
uint8 sport\n\
uint8 dport\n\
uint8 type\n\
uint16 seq\n\
uint8[] data\n\
uint8 checksum\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::packets_485net::packet_485net_stream_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::packets_485net::packet_485net_stream_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::packets_485net::packet_485net_stream_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::packets_485net::packet_485net_stream_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.source);
    stream.next(m.destination);
    stream.next(m.sport);
    stream.next(m.dport);
    stream.next(m.type);
    stream.next(m.seq);
    stream.next(m.data);
    stream.next(m.checksum);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct packet_485net_stream_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::packets_485net::packet_485net_stream_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::packets_485net::packet_485net_stream_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.source);
    s << indent << "destination: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.destination);
    s << indent << "sport: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sport);
    s << indent << "dport: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dport);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "seq: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.seq);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PACKETS_485NET_MESSAGE_PACKET_485NET_STREAM_H

