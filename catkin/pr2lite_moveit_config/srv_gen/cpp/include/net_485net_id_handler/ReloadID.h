/* Auto-generated by genmsg_cpp for file /home/ros/rosbuild_ws/prlite-pc/net_485net_id_handler/srv/ReloadID.srv */
#ifndef NET_485NET_ID_HANDLER_SERVICE_RELOADID_H
#define NET_485NET_ID_HANDLER_SERVICE_RELOADID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace net_485net_id_handler
{
template <class ContainerAllocator>
struct ReloadIDRequest_ {
  typedef ReloadIDRequest_<ContainerAllocator> Type;

  ReloadIDRequest_()
  {
  }

  ReloadIDRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReloadIDRequest
typedef  ::net_485net_id_handler::ReloadIDRequest_<std::allocator<void> > ReloadIDRequest;

typedef boost::shared_ptr< ::net_485net_id_handler::ReloadIDRequest> ReloadIDRequestPtr;
typedef boost::shared_ptr< ::net_485net_id_handler::ReloadIDRequest const> ReloadIDRequestConstPtr;



template <class ContainerAllocator>
struct ReloadIDResponse_ {
  typedef ReloadIDResponse_<ContainerAllocator> Type;

  ReloadIDResponse_()
  {
  }

  ReloadIDResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReloadIDResponse
typedef  ::net_485net_id_handler::ReloadIDResponse_<std::allocator<void> > ReloadIDResponse;

typedef boost::shared_ptr< ::net_485net_id_handler::ReloadIDResponse> ReloadIDResponsePtr;
typedef boost::shared_ptr< ::net_485net_id_handler::ReloadIDResponse const> ReloadIDResponseConstPtr;


struct ReloadID
{

typedef ReloadIDRequest Request;
typedef ReloadIDResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ReloadID
} // namespace net_485net_id_handler

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "net_485net_id_handler/ReloadIDRequest";
  }

  static const char* value(const  ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "net_485net_id_handler/ReloadIDResponse";
  }

  static const char* value(const  ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReloadIDRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReloadIDResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<net_485net_id_handler::ReloadID> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const net_485net_id_handler::ReloadID&) { return value(); } 
};

template<>
struct DataType<net_485net_id_handler::ReloadID> {
  static const char* value() 
  {
    return "net_485net_id_handler/ReloadID";
  }

  static const char* value(const net_485net_id_handler::ReloadID&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "net_485net_id_handler/ReloadID";
  }

  static const char* value(const net_485net_id_handler::ReloadIDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "net_485net_id_handler/ReloadID";
  }

  static const char* value(const net_485net_id_handler::ReloadIDResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NET_485NET_ID_HANDLER_SERVICE_RELOADID_H

